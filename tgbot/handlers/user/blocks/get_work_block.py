import json
from datetime import datetime
from typing import Literal

from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery
from aiogram import F, Router
from aiogram.fsm.context import FSMContext

from create_bot import bot
from tgbot.handlers.user.inline import GetWorkInline
from tgbot.middlewares.black_list import BlockUserMiddleware
from tgbot.misc.states import UsersFSM
from tgbot.models.json_config import get_config
from tgbot.models.sql_connector import UsersDAO, FollowingsDAO, RepostsDAO

router = Router()
router.message.outer_middleware(BlockUserMiddleware())
router.callback_query.outer_middleware(BlockUserMiddleware())

inline = GetWorkInline()


def get_jobs(jobs: list, job_type: Literal["following", "repost"], user_id: str):
    price = get_config(key=f"{job_type}s_worker_price")
    lang_dict = dict(following="–ü–æ–¥–ø–∏—Å–∫–∞", repost="–†–µ–ø–æ—Å—Ç")
    result = []
    for item in list(filter(lambda x: x["author_id"] != user_id, jobs)):
        user_ids = [i["user_id"] for i in item["users"]]
        res_dict = {}
        if user_id not in user_ids:
            res_dict["id"] = item["id"]
            res_dict["create_dtime"] = item["create_dtime"]
            res_dict["type"] = job_type
            res_dict["price"] = price
            res_dict["ru_title"] = lang_dict[job_type]
            result.append(res_dict)
    return result


@router.callback_query(F.data == "get_work")
async def get_work_block(callback: CallbackQuery):
    followings = await FollowingsDAO.get_many(status="on")
    reposts = await RepostsDAO.get_many(status="on")
    followings = get_jobs(jobs=followings, job_type="following", user_id=str(callback.from_user.id))
    reposts = get_jobs(jobs=reposts, job_type="repost", user_id=str(callback.from_user.id))
    followings.extend(reposts)
    job_list = sorted(followings, key=lambda x: x["create_dtime"])
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
    kb = inline.works_list_kb(jobs=job_list)
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@router.callback_query(F.data.split(":")[0] == "job_profile")
async def get_work_block(callback: CallbackQuery, state: FSMContext):
    job_type = callback.data.split(":")[1]
    job_id = int(callback.data.split(":")[2])
    price = get_config(key=f"{job_type}s_worker_price")
    if job_type == "following":
        job_profile = await FollowingsDAO.get_one_or_none(id=job_id)
        text = [
            f"–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ {job_profile['chat_link']}",
            "–í—Å—Ç—É–ø–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∏ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å\"",
            f"–ù–∞–≥—Ä–∞–¥–∞: {price} üí∞"
        ]
        kb = inline.accept_work_kb(job_type=job_type, job_id=job_id)
    else:  # repost
        job_profile = await RepostsDAO.get_one_or_none(id=job_id)
        text = [
            "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ " 
            "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã (–∫–∞–Ω–∞–ª–∞). –í —Ç–µ—á–µ–Ω–∏–∏ " 
            "–Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è. ",
            f"–ù–∞–≥—Ä–∞–¥–∞: {price} üí∞"
        ]
        await callback.message.answer(job_profile["repost_msg"])
        await callback.message.answer(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—É—é –¥–æ–±–∞–≤–∏–ª–∏ –±–æ—Ç–∞")
        kb = None
        await state.set_state(UsersFSM.get_work_repost_url)
    await callback.message.answer("\n".join(text), reply_markup=kb)
    await bot.answer_callback_query(callback.id)


async def accept_following(user_id: str, price: int, job_profile):
    is_user = list(filter(lambda x: x["user_id"] == user_id, job_profile["users"]))
    if len(is_user) > 0:
        text = "–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç—É –∑–∞–¥–∞—á—É —Ä–∞–Ω–µ–µ"
        kb = inline.home_kb()
        await bot.send_message(chat_id=user_id, text=text, reply_markup=kb)
        return
    await UsersDAO.update_balance(user_id=user_id, delta_balance=price)
    user_job_dict = dict(user_id=user_id, dtime=int(datetime.utcnow().timestamp()), status="created")
    users_data = job_profile["users"]
    users_data.append(user_job_dict)
    await FollowingsDAO.update_by_id(item_id=job_profile["id"], users=users_data)
    text = f"–û—Ç–ª–∏—á–Ω–æ. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {price} üí∞. –ù–µ –ø–æ–∫–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–≥—Ä–∞–¥–∞ " \
           f"–±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞, –∞ –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã"
    kb = inline.home_kb()
    await bot.send_message(chat_id=user_id, text=text, reply_markup=kb)


@router.callback_query(F.data.split(":")[0] == "proof_following")
async def get_work_block(callback: CallbackQuery):
    job_id = int(callback.data.split(":")[1])
    job_profile = await FollowingsDAO.get_one_or_none(id=job_id)
    price = get_config(key=f"followings_worker_price")
    await bot.answer_callback_query(callback.id)
    try:
        chat_member = await bot.get_chat_member(chat_id=job_profile["chat_link"], user_id=int(callback.from_user.id))
        user_status = chat_member.status
        if user_status in ["creator", "administrator", "member"]:
            await accept_following(user_id=str(callback.from_user.id), price=price, job_profile=job_profile)
        else:
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –Ω—É–∂–Ω–æ–µ " \
                   "—Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É"
            kb = inline.accept_work_kb(job_type="following", job_id=job_id)
            await callback.message.answer(text, reply_markup=kb)
    except TelegramBadRequest:
        await accept_following(user_id=str(callback.from_user.id), price=price, job_profile=job_profile)


@router.message(F.text, UsersFSM.get_work_repost_url)
async def get_wok_block(message: Message, state: FSMContext):
    url = message.text
    kb = inline.home_kb()
    if url[0] != "@":
        try:
            url = f"@{url.split('/')[-1]}"
        except IndexError:
            text = "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑"
            await message.answer(text, reply_markup=kb)
            return
    chat_population = await bot.get_chat_member_count(chat_id=url)

