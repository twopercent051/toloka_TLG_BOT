from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery
from aiogram import F, Router
from aiogram.fsm.context import FSMContext

from create_bot import bot
from tgbot.handlers.user.inline import SetWorkInline
from tgbot.middlewares.black_list import BlockUserMiddleware
from tgbot.misc.states import UsersFSM
from tgbot.models.json_config import get_config
from tgbot.models.redis_connector import RedisConnector
from tgbot.models.sql_connector import UsersDAO, FollowingsDAO, RepostsDAO

router = Router()
router.message.outer_middleware(BlockUserMiddleware())
router.callback_query.outer_middleware(BlockUserMiddleware())

inline = SetWorkInline()


@router.callback_query(F.data == "set_work")
async def set_work_block(callback: CallbackQuery):
    text = "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞, –∞ —Ç–∞–∫–∂–µ —Ä–µ–ø–æ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ " \
           "–∫–∞–Ω–∞–ª–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    kb = inline.type_work_kb()
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@router.callback_query(F.data.split(":")[0] == "set_work_type")
async def set_work_block(callback: CallbackQuery, state: FSMContext):
    work_type = callback.data.split(":")[1]
    user = await UsersDAO.get_one_or_none(user_id=str(callback.from_user.id))
    balance = user["balance"]
    if work_type == "followings":
        price = get_config(key="followings_employer_price")
        text = f"–¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {price} –±–∞–ª–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ " \
               f"(—Å–µ–π—á–∞—Å —É –≤–∞—Å {balance} –±–∞–ª–ª–æ–≤)"
    else:  # reposts
        price = get_config(key="reposts_employer_price")
        text = f"–¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–æ—Å—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {price} –±–∞–ª–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–æ—Å—Ç–æ–≤ " \
               f"(—Å–µ–π—á–∞—Å —É –≤–∞—Å {balance} –±–∞–ª–ª–æ–≤)"
    await state.update_data(set_work_type=work_type)
    await state.set_state(UsersFSM.quantity)
    kb = inline.home_kb()
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@router.message(F.text, UsersFSM.quantity)
async def set_work_block(message: Message, state: FSMContext):
    state_data = await state.get_data()
    set_work_type = state_data["set_work_type"]
    kb = inline.home_kb()
    try:
        quantity = int(message.text)
        if quantity <= 0:
            text = "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è"
            await message.answer(text, reply_markup=kb)
            return
    except ValueError:
        text = "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ"
        await message.answer(text, reply_markup=kb)
        return
    user = await UsersDAO.get_one_or_none(user_id=str(message.from_user.id))
    balance = user["balance"]
    price = get_config(key=f"{set_work_type}_employer_price")
    if balance < quantity * price:
        text = "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤ " \
               "–ø–æ–¥–¥–µ—Ä–∂–∫–µ"
        kb = inline.support_kb()
    else:
        if set_work_type == "followings":
            text = "üëç –ó–¥–æ—Ä–æ–≤–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª, –∫—É–¥–∞ –±—É–¥–µ–º –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å " \
                   "—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n<u>–ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª –¥—Ä—É–≥–æ–≥–æ " \
                   "—É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è " \
                   "–∫–æ–≥–¥–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞—Ç—å, –º—ã –Ω–µ —Å–º–æ–∂–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ " \
                   "—Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞—è–≤–ª–µ–Ω–Ω–æ–º—É</u>"

            await state.set_state(UsersFSM.followings_url)
        else:
            text = "üëç –ó–¥–æ—Ä–æ–≤–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥—É—Ç —Ä–µ–ø–æ—Å—Ç–∏—Ç—å –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏"
            await state.set_state(UsersFSM.repost_text)
    await state.update_data(quantity=quantity, price=price)
    await message.answer(text, reply_markup=kb)


@router.message(F.text, UsersFSM.followings_url)
async def set_work_block(message: Message, state: FSMContext):
    url = message.text
    kb = inline.home_kb()
    if url[0] != "@":
        try:
            url = f"@{url.split('/')[-1]}"
        except IndexError:
            text = "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑"
            await message.answer(text, reply_markup=kb)
            return
    state_data = await state.get_data()
    quantity = state_data["quantity"]
    price = state_data["price"]
    annotation = [
        f"<u>–ì—Ä—É–ø–ø–∞ (–∫–∞–Ω–∞–ª):</u> {url}",
        f"<u>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</u> {quantity}",
        f"<u>–¶–µ–Ω–∞:</u> {price}",
        f"<u>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</u> {quantity * price}",
    ]
    try:
        await bot.get_chat_member(chat_id=url, user_id=int(message.from_user.id))
        text = ["üëç –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –º–æ–∂–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ:\n"]
        text.extend(annotation)
        kb = inline.accept_work_kb(set_type_work="followings")
    except TelegramBadRequest as ex:
        if ex.message.split(":")[-1].strip() == "user not found":
            text = [
                "<u>–í–∏–¥–∏–º–æ –≤—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª. –ú—ã –Ω–µ —Å–º–æ–∂–µ–º —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ "
                "—Å—Ç–∞–ª–∏ –≤–∞—à–∏–º–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏</u>",
                "–¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, –í—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –º–æ–∂–µ—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n",
            ]
            text.extend(annotation)
            kb = inline.accept_work_kb(set_type_work="followings")
        else:  # chat not found
            text = "–Ø –Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ ü§∑\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑"
            await message.answer(text, reply_markup=kb)
            return
    await message.answer("\n".join(text), reply_markup=kb)
    await state.update_data(url=url)
    await state.set_state(UsersFSM.home)


@router.message(F.text, UsersFSM.repost_text)
async def set_work_block(message: Message, state: FSMContext):
    await state.update_data(repost_msg=message.text)
    state_data = await state.get_data()
    quantity = state_data["quantity"]
    price = state_data["price"]
    text = [
        "üëç –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –º–æ–∂–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ:\n",
        message.text,
        f"<u>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</u> {quantity}",
        f"<u>–¶–µ–Ω–∞:</u> {price}",
        f"<u>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</u> {quantity * price}",
    ]
    kb = inline.accept_work_kb(set_type_work="reposts")
    await message.answer("\n".join(text), reply_markup=kb)
    await state.set_state(UsersFSM.home)


@router.callback_query(F.data.split(":")[0] == "accept_set_work")
async def set_work_block(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    set_type_work = callback.data.split(":")[1]
    state_data = await state.get_data()
    quantity = state_data["quantity"]
    price = state_data["price"]
    if set_type_work == "followings":
        url = state_data["url"]
        await FollowingsDAO.create(author_id=user_id, chat_link=url, quantity=quantity)
    else:  # reposts
        repost_msg = state_data["repost_msg"]
        await RepostsDAO.create(author_id=user_id, repost_msg=repost_msg, quantity=quantity)
        RedisConnector.add_item(redis_db_name="repost_texts", item=repost_msg)
    total_cost = - (quantity * price)
    await UsersDAO.update_balance(user_id=user_id, delta_balance=total_cost)
    text = "üëç –ó–∞–¥–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"
    kb = inline.home_kb()
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)
